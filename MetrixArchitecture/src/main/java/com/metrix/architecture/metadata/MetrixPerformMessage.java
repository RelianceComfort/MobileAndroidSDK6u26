package com.metrix.architecture.metadata;

import java.util.ArrayList;
import java.util.Hashtable;

import com.google.gson.JsonObject;
import com.metrix.architecture.database.MetrixDatabaseManager;
import com.metrix.architecture.utilities.AndroidResourceHelper;
import com.metrix.architecture.utilities.DataField;
import com.metrix.architecture.utilities.MetrixDateTimeHelper;
import com.metrix.architecture.utilities.User;

/**
 * Can be used to easily generate a perform message to be synced with the
 * back-end application.
 * 
 * @since 5.5
 */
public class MetrixPerformMessage implements IMetrixMessage {

	/**
	 * The name of the perform message to generate.
	 */
	public String performName;

	/**
	 * The parameters to include in the perform message.
	 */
	public Hashtable<String, String> parameters;

	/**
	 * A convenience constructor that allows you to pass in the name of the
	 * perform message.
	 * 
	 * @param performName
	 *            The name of the perform message to generate.
	 */
	public MetrixPerformMessage(String performName) {
		this.performName = performName;
		this.parameters = new Hashtable<String, String>();
	}

	/**
	 * A convenience constructor
	 * 
	 * @param performName
	 *            The name of the perform message to generate.
	 * @param parameterName
	 *            The name of a single parameter to include.
	 * @param parameterValue
	 *            The value for a single parameter to include.
	 */
	public MetrixPerformMessage(String performName, String parameterName, String parameterValue) {
		this.performName = performName;
		this.parameters = new Hashtable<String, String>();
		this.parameters.put(parameterName, parameterValue);
	}

	/**
	 * A convenience constructor that allows you to pass in the name of the
	 * perform message as well as the parameters to include.
	 * 
	 * @param performName
	 *            The name of the perform message to generate.
	 * @param parameters
	 *            The parameters to include in the perform message.
	 * 
	 *            <pre>
	 * params.put(&quot;part_id&quot;, part_id);
	 * params.put(&quot;start_lat&quot;, MetrixFloatHelper.convertNumericFromUIToDB(MetrixFloatHelper.currentLocaleNumericValue(geoLat)));
	 * params.put(&quot;start_long&quot;, MetrixFloatHelper.convertNumericFromUIToDB(MetrixFloatHelper.currentLocaleNumericValue(geoLong)));
	 * params.put(&quot;number_place&quot;, numPlaces);
	 * params.put(&quot;mileage_limit&quot;, mileLimit);
	 * 
	 * MetrixPerformMessage performStockSearch = new MetrixPerformMessage(&quot;perform_get_closest_places_by_part_id&quot;, params);
	 * performStockSearch.save();
	 * </pre>
	 */
	public MetrixPerformMessage(String performName, Hashtable<String, String> parameters) {
		this.performName = performName;
		this.parameters = parameters;
	}

	/**
	 * Generates a JSON document to be synced based on the data found in the
	 * attributes.
	 */
	@Override
	public String format() {
		JsonObject document = new JsonObject();
		JsonObject parameters = new JsonObject();
		JsonObject nameValue = new JsonObject();

		for (String key : this.parameters.keySet()) {
			String value = this.parameters.get(key);
			nameValue.addProperty(key, value);
			parameters.add("parameters", nameValue);
		}

		document.add(this.performName, parameters);
		return document.toString();
	}

	/**
	 * Inserts the JSON document generated by the format method into the sync
	 * tables.
	 * 
	 * <pre>
	 * params.put(&quot;part_id&quot;, part_id);
	 * params.put(&quot;start_lat&quot;, MetrixFloatHelper.convertNumericFromUIToDB(MetrixFloatHelper.currentLocaleNumericValue(geoLat)));
	 * params.put(&quot;start_long&quot;, MetrixFloatHelper.convertNumericFromUIToDB(MetrixFloatHelper.currentLocaleNumericValue(geoLong)));
	 * params.put(&quot;number_place&quot;, numPlaces);
	 * params.put(&quot;mileage_limit&quot;, mileLimit);
	 * 
	 * MetrixPerformMessage performStockSearch = new MetrixPerformMessage(&quot;perform_get_closest_places_by_part_id&quot;, params);
	 * performStockSearch.save();
	 * </pre>
	 */
	@Override
	public Boolean save() {
		ArrayList<DataField> fields = new ArrayList<DataField>();
		fields.add(new DataField("person_id", User.getUser().personId));

		fields.add(new DataField("transaction_type", "update"));
		fields.add(new DataField("transaction_desc", this.performName));
		fields.add(new DataField("message", this.format()));
		fields.add(new DataField("transaction_id", MetrixDatabaseManager.generateTransactionId("mm_message_out")));
		fields.add(new DataField("status", "READY"));
		fields.add(new DataField("created_dttm", MetrixDateTimeHelper.getCurrentDate(MetrixDateTimeHelper.DATE_TIME_FORMAT_WITH_SECONDS, true)));
		fields.add(new DataField("modified_dttm", MetrixDateTimeHelper.getCurrentDate(MetrixDateTimeHelper.DATE_TIME_FORMAT_WITH_SECONDS, true)));
		long result = MetrixDatabaseManager.insertRow("mm_message_out", fields);

		if (result < 0) {
			return false;
		} else {
			return true;
		}
	}

	@Override
	public String toString() {
		StringBuilder value = new StringBuilder();
		value.append(AndroidResourceHelper.getMessage("Perform1Args", performName));
		value.append(", ");
		value.append(AndroidResourceHelper.getMessage("Format1Args", this.format()));

		return value.toString();
	}
}